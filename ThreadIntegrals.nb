(*The very first notebook I wrote in Wolfram and the very reason I \
needed to move into programming and rely less on pencil and paper to \
do double integrals.*)
(*The motivation to this was originally a question for pure fun, \
however it may have applications in work when applying a force to a \
surface in some 2D plane where resistance is dependent on where on \
the surface contact is made.*)

(*X and Y are parameterized equations*)
X[t_] := Cos[t];
Y[t_] := Sin[t];

(*H and G are parameterized functions that will be projected away \
from (X, Y) in a direction orthogonal to the trajectory of X and Y.*)


H[t_] := 0;
G[t_] := -t;

(*u and v are the functions that return a unit vector that is \
orthogonal to the trajectory of X and Y.*)
u[t_] := X'[t]/Sqrt[X'[t]^2 + Y'[t]^2];
v[t_] := -Y'[t]/Sqrt[X'[t]^2 + Y'[t]^2];

(*This integral is finding the arclength of the parameterized line (X \
+ u w, Y + v w) where w will be integrated from G to H.*)
NIntegrate[
 Sqrt[(X'[t] + w v'[t])^2 + (Y'[t] + w u'[t])^2], {t, 0, 2 Pi}, {w, 
  G[t], H[t]}]

(*This plots illustrates how the threads extend parralel to the \
original parameterized equation and then are summed up to produce an \
area.*)
ParametricPlot[{{X[t] + w v[t], Y[t] + w u[t]}, { X[t], Y[t]}}, {t, 
  0, 2 Pi}, {w, G[t], H[t]}, PlotLegends -> "Expressions", 
 PlotRange -> {{-5, 12}, {-6, 3}}] 

(*This animation further illustrates how each thread extends from the \
parameterized function and smoothly extends.*)
Animate[ParametricPlot[{X[t] + (w H[t] + (1 - w) G[t]) v[t], 
   Y[t] + (w H[t] + (1 - w) G[t]) u[t]}, {t, 0, 2 Pi}, 
  PlotRange -> {{-5, 12}, {-6, 3}}], {w, 0, 1}]
