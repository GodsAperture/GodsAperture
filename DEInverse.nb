(*
My first big project in the Wolfram language and by far my proudest \
achievement in the Wolfram language.
 DEInverse will take a given ordinary differential equation \
(Q[y[t],t] \[Equal] 0) and return a new ODE such that its solution is \
the exact inverse of the solution of the original ODE and if there \
are initial conditions it will invert them as well.
*)
DEInverse[function_, head_, variable_, list_: Null] :=
 Block[{transform, exp, equate},
  
  (*The transform function relies on the fact that y[g[t]] \[Equal] 
  t and whose derivatives also relate in a way such that y[
  t] isn't involved, 
  therefore one can obtain the ODE of the inverse by replacing \
Derivative[n][head][variable] with transform[n]*)
  transform := 
   Function[a, 
    Nest[Function[b, D[b, variable]/D[head[variable], variable]], 
     variable, a]];
  If[TrueQ[list == Null],
   
   (*===TRUE ENDING===*)
   
   (*List of rules for replacing various instances of functions and \
arguments*)
   {((function /. 
         {variable -> head[variable]}) /.
       	{Derivative[n_][head][head[variable]] :> transform[n]}) /.
     {head[head[variable]] :> variable}},
   
   (*===FALSE ENDING===*)
   
   Flatten[Join[
     (*List of rules for replacing various instances of functions and \
arguments*)
     {((function /. 
           {variable -> head[variable]}) /.
         	{Derivative[n_][head][head[variable]] :> transform[n]}) /.
       {head[head[variable]] :> variable}},
     
     ,
     
     (*The code below is used to adjust the initial conditions given \
in list into the proper conditions for the new ODE*)
     (((list
            /. 
            Derivative[n_][head][_] == _ /; n > 0 :> 
             equate[exp[n], transform[n]])
          
          /. Append[
           (Rest[(SortBy[list, Derivative] /. 
                Equal[c_, d_] :> Rule[c, d])]
             /. 
             Rule[Derivative[n_][head][_], a_] /; n != 0 :> 
              Rule[Derivative[n][head][variable], a ]),
           
           Derivative[0][head][a_] == 
             b_ :> (Derivative[0][head][b] == a)])
        /. equate[a_, b_] :> Equal[a, b])
      /. exp[n_] :> 
       Derivative[n][
         head][ (list /. Equal[Derivative[0][head][_], a_] :> a)[[1]]]
     ]]
   ]
  ]
  
  
  
  (*Example provided below*)
  
  DEInverse[y''[t] + y[t] == 0, y, t, {y[Pi/2] == 0, y'[Pi/2] == -1}]
  
  (*Original solution was Cos[t], new solution will be ArcCos[t]*)
  
  {t - (y^\[Prime]\[Prime])[t]/Derivative[1][y][t]^3 == 0, y[0] == \[Pi]/2, Derivative[1][y][0] == -1}
